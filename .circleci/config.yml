version: 2.1
orb:
  slack: circleci/slack@4.10.1
commands:

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible  

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Build backend
        command: |
          cd backend
          npm run build
    - save_cache:
        paths: [backend/node_modules]
        key: backend-deps-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Run frontend unit tests
        command: |
          cd frontend
          npm run test
                
  test-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Run backend unit tests
        command: |
          cd backend
          npm run test

  scan-frontend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Scan frontend packages
        command: |
          cd frontend
          npm install oauth-sign@^0.9.0
          npm audit fix --audit-level=critical
          #npm audit --audit-level=critical
          
  scan-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Scan backend packages
        command: |
          cd backend
          npm install
          #npm install oauth-sign@^0.9.0
          npm audit fix --force --audit-level=critical
          npm audit fix --force --audit-level=critical
          #npm audit --audit-level=critical
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure Backend Infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add Backend Ip to Ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

workflows:
  default:
     jobs:
       - build-frontend
       - build-backend
       - test-frontend:
            requires: [build-frontend]
       - test-backend:
            requires: [build-backend]
       - scan-frontend:
            requires: [build-frontend]
       - scan-backend:
            requires: [build-backend]